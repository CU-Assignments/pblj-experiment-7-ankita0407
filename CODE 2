import java.sql.*;
import java.util.*;

public class StudentManager {

    // --- Model ---
    static class Student {
        private int studentID;
        private String name;
        private String department;
        private double marks;

        public Student(int studentID, String name, String department, double marks) {
            this.studentID = studentID;
            this.name = name;
            this.department = department;
            this.marks = marks;
        }

        public int getStudentID() { return studentID; }
        public String getName() { return name; }
        public String getDepartment() { return department; }
        public double getMarks() { return marks; }

        public void setName(String name) { this.name = name; }
        public void setDepartment(String department) { this.department = department; }
        public void setMarks(double marks) { this.marks = marks; }

        @Override
        public String toString() {
            return studentID + " | " + name + " | " + department + " | " + marks;
        }
    }

    // --- Controller ---
    static class StudentController {
        private static final String URL = "jdbc:mysql://localhost:3306/schooldb";
        private static final String USER = "root";
        private static final String PASS = "your_password"; // Change to your DB password

        private Connection connect() throws SQLException {
            return DriverManager.getConnection(URL, USER, PASS);
        }

        public void addStudent(Student student) {
            String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
            try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, student.getStudentID());
                stmt.setString(2, student.getName());
                stmt.setString(3, student.getDepartment());
                stmt.setDouble(4, student.getMarks());
                stmt.executeUpdate();
                System.out.println(" Student added successfully.");
            } catch (SQLException e) {
                System.out.println(" Error: " + e.getMessage());
            }
        }

        public List<Student> getAllStudents() {
            List<Student> students = new ArrayList<>();
            String sql = "SELECT * FROM Student";
            try (Connection conn = connect(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
                while (rs.next()) {
                    Student s = new Student(
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks")
                    );
                    students.add(s);
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
            return students;
        }

        public void updateStudent(Student student) {
            String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
            try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, student.getName());
                stmt.setString(2, student.getDepartment());
                stmt.setDouble(3, student.getMarks());
                stmt.setInt(4, student.getStudentID());
                int rows = stmt.executeUpdate();
                if (rows > 0) {
                    System.out.println("Student updated successfully.");
                } else {
                    System.out.println("Student not found.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }

        public void deleteStudent(int studentID) {
            String sql = "DELETE FROM Student WHERE StudentID=?";
            try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, studentID);
                int rows = stmt.executeUpdate();
                if (rows > 0) {
                    System.out.println("Student deleted successfully.");
                } else {
                    System.out.println("Student not found.");
                }
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    // --- View/Main Application ---
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StudentController controller = new StudentController();

        while (true) {
            System.out.println("\n=== Student Management System ===");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // clear buffer

            switch (choice) {
                case 1:
                    System.out.print("Enter Student ID: ");
                    int id = scanner.nextInt(); scanner.nextLine();
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Department: ");
                    String dept = scanner.nextLine();
                    System.out.print("Enter Marks: ");
                    double marks = scanner.nextDouble();
                    controller.addStudent(new Student(id, name, dept, marks));
                    break;

                case 2:
                    List<Student> students = controller.getAllStudents();
                    System.out.println("\nID | Name | Department | Marks");
                    for (Student s : students) {
                        System.out.println(s);
                    }
                    break;

                case 3:
                    System.out.print("Enter Student ID to update: ");
                    int updateId = scanner.nextInt(); scanner.nextLine();
                    System.out.print("Enter new Name: ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new Department: ");
                    String newDept = scanner.nextLine();
                    System.out.print("Enter new Marks: ");
                    double newMarks = scanner.nextDouble();
                    controller.updateStudent(new Student(updateId, newName, newDept, newMarks));
                    break;

                case 4:
                    System.out.print("Enter Student ID to delete: ");
                    int deleteId = scanner.nextInt();
                    controller.deleteStudent(deleteId);
                    break;

                case 5:
                    System.out.println("Exiting... Goodbye!");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }
}
